plugins {
    id 'com.enonic.defaults' version '2.1.2'
    id 'com.enonic.xp.app' version '3.4.0'
    id 'com.github.node-gradle.node' version '7.0.1'
    id 'maven-publish'
    id 'jacoco'
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/node.gradle"

app {
    name = project.appName
    displayName = 'Guillotine'
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    systemVersion = "${xpVersion}"
}

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
}

compileTestJava {
    options.encoding = defaultEncoding
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:script-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"

    include "com.graphql-java:graphql-java:21.0"
    include "com.graphql-java:graphql-java-extended-scalars:21.0"

    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.lib:lib-mustache:2.1.1"
    include "com.enonic.lib:lib-static:1.0.3"
    include "com.enonic.lib:lib-router:3.1.0"

    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

node {
    version = '18.17.1'
    download = true
}

tasks.register('lint', NpmTask) {
    group 'verification'
    dependsOn( npmInstall )
    args = ['run', 'lint:quiet']
    inputs.files fileTree( dir: 'src', include: '**/*.ts' )
}

check.dependsOn( lint )

tasks.register('webpack', NpmTask) {
    dependsOn( npmInstall )
    environment = ['NODE_ENV': nodeEnvironment()]
    description = 'Build UI resources (ts, css, etc).'
    args = ['run', 'build']
    inputs.dir "src/main"
    inputs.file 'webpack.config.js'
    outputs.dir "$buildDir/resources/main"
}

jar {
    exclude 'assets/**/*.tsx'
    exclude 'assets/**/*.less'
    exclude 'assets/styles/graphiql.min.css'
    exclude 'assets/**/styles/*.js'

    if ( isProd() )
    {
        exclude 'assets/**/*.map'
    }

    outputs.dir "$buildDir/resources/main"

    dependsOn( webpack )
}

javadoc.dependsOn( webpack, jar )
compileTestJava.dependsOn( webpack, jar )
